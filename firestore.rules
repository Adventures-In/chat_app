rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // True if the user is a participant in a conversation
    function inConversation() {
      return resource.data.participant1 == request.auth.uid || resource.data.participant2 == request.auth.uid;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    // Match any document in the 'users' collection
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow write: if false;
    }

    // Match any document in the 'conversations' collection
    match /conversations/{conversationId} {
      
      function isParticipant(rsc) {
        return request.auth.uid == rsc.data.participant1 || request.auth.uid == rsc.data.participant2;
      }

      allow create: if request.auth.uid != null;
      allow update: if false;
      allow delete: if false;
      allow read: if inConversation();

      // see: https://firebase.google.com/docs/firestore/solutions/role-based-access
      match /messages/{messageId} {
        allow create: if isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)));
        allow update: if false;
        allow delete: if false;
        allow read: if isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)));
      }
    }
  }
}